Prefix(:=<http://www.obdasystems.com/books/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(skos:=<http://www.w3.org/2004/02/skos/core#>)
Prefix(swrl:=<http://www.w3.org/2003/11/swrl#>)
Prefix(time:=<http://www.w3.org/2006/time#>)
Prefix(swrlb:=<http://www.w3.org/2003/11/swrlb#>)

Ontology(<http://www.obdasystems.com/books/>

<http://www.obdasystems.com/books/3.1>
Declaration(Class(:AudioBook))
Declaration(Class(:Author))
Declaration(Class(:Book))
Declaration(Class(:ClassicBook))
Declaration(Class(:E-Book))
Declaration(Class(:EconomicEdition))
Declaration(Class(:Edition))
Declaration(Class(:EmergingWriter))
Declaration(Class(:Person))
Declaration(Class(:PrintedBook))
Declaration(Class(:Publisher))
Declaration(Class(:ScientificBook))
Declaration(Class(:ScientificBookRevision))
Declaration(Class(:SpecialEdition))
Declaration(Class(:UnpublishedBook))
Declaration(ObjectProperty(:actAsAuthor))
Declaration(ObjectProperty(:actAsPublisher))
Declaration(ObjectProperty(:hasBookRevision))
Declaration(ObjectProperty(:hasEdition))
Declaration(ObjectProperty(:publishedBy))
Declaration(ObjectProperty(:writtenBy))
Declaration(DataProperty(:dateOfBirth))
Declaration(DataProperty(:dateOfPublication))
Declaration(DataProperty(:durationInSeconds))
Declaration(DataProperty(:editionNumber))
Declaration(DataProperty(:genre))
Declaration(DataProperty(:name))
Declaration(DataProperty(:numberOfPages))
Declaration(DataProperty(:penName))
Declaration(DataProperty(:priceInDollars))
Declaration(DataProperty(:scientificBookRevisionDate))
Declaration(DataProperty(:scientificTopic))
Declaration(DataProperty(:title))
Declaration(DataProperty(:vatNumber))
Declaration(Datatype(xsd:dateTime))
Declaration(Datatype(xsd:double))
Declaration(Datatype(xsd:integer))
Declaration(Datatype(xsd:string))
AnnotationAssertion(rdfs:label :actAsAuthor "actAsAuthor"@en)
ObjectPropertyDomain(:actAsAuthor :Person)
ObjectPropertyRange(:actAsAuthor :Author)
AnnotationAssertion(rdfs:label :actAsPublisher "actAsPublisher"@en)
ObjectPropertyDomain(:actAsPublisher :Person)
ObjectPropertyRange(:actAsPublisher :Publisher)
AnnotationAssertion(rdfs:label :hasBookRevision "hasBookRevision"@en)
InverseFunctionalObjectProperty(:hasBookRevision)
ObjectPropertyRange(:hasBookRevision :ScientificBookRevision)
AnnotationAssertion(rdfs:label :hasEdition "hasEdition"@it)
InverseFunctionalObjectProperty(:hasEdition)
ObjectPropertyDomain(:hasEdition :Book)
ObjectPropertyRange(:hasEdition :Edition)
AnnotationAssertion(rdfs:label :publishedBy "publishedBy"@en)
ObjectPropertyDomain(:publishedBy :Edition)
ObjectPropertyRange(:publishedBy :Publisher)
AnnotationAssertion(rdfs:label :writtenBy "writtenBy"@it)
ObjectPropertyDomain(:writtenBy :Book)
ObjectPropertyRange(:writtenBy :Author)
AnnotationAssertion(rdfs:label :dateOfBirth "dateOfBirth"@en)
FunctionalDataProperty(:dateOfBirth)
DataPropertyRange(:dateOfBirth xsd:dateTime)
AnnotationAssertion(rdfs:label :dateOfPublication "dateOfPublication"@it)
FunctionalDataProperty(:dateOfPublication)
DataPropertyRange(:dateOfPublication xsd:dateTime)
AnnotationAssertion(rdfs:label :durationInSeconds "durationInSeconds"@en)
DataPropertyDomain(:durationInSeconds :AudioBook)
DataPropertyRange(:durationInSeconds xsd:integer)
AnnotationAssertion(rdfs:label :editionNumber "editionNumber"@it)
FunctionalDataProperty(:editionNumber)
DataPropertyDomain(:editionNumber :Edition)
DataPropertyRange(:editionNumber xsd:string)
AnnotationAssertion(rdfs:comment :genre "It is a genre of the book which describe the style in which the book is written"@en)
AnnotationAssertion(rdfs:label :genre "genre"@it)
DataPropertyDomain(:genre :Book)
DataPropertyRange(:genre xsd:string)
AnnotationAssertion(rdfs:label :name "name"@en)
FunctionalDataProperty(:name)
DataPropertyRange(:name xsd:string)
AnnotationAssertion(rdfs:label :numberOfPages "numberOfPages"@en)
DataPropertyDomain(:numberOfPages :PrintedBook)
DataPropertyRange(:numberOfPages xsd:integer)
AnnotationAssertion(rdfs:comment :penName "A pen name, also called a nom de plume or a literary double, is a pseudonym (or, in some cases, a variant form of a real name) adopted by an author and printed on the title page or by-line of their works in place of their real name. "@en)
AnnotationAssertion(rdfs:label :penName "penName"@en)
DataPropertyDomain(:penName :Author)
DataPropertyRange(:penName xsd:string)
AnnotationAssertion(rdfs:label :priceInDollars "priceInDollars"@en)
FunctionalDataProperty(:priceInDollars)
DataPropertyRange(:priceInDollars xsd:double)
AnnotationAssertion(rdfs:label :scientificBookRevisionDate "scientificBookRevisionDate"@en)
DataPropertyDomain(:scientificBookRevisionDate :ScientificBookRevision)
DataPropertyRange(:scientificBookRevisionDate xsd:dateTime)
AnnotationAssertion(rdfs:label :scientificTopic "scientificTopic"@en)
DataPropertyRange(:scientificTopic xsd:string)
AnnotationAssertion(rdfs:comment :title "It is the title of the book. It identifies the book along eith the author."@en)
AnnotationAssertion(rdfs:label :title "title"@it)
FunctionalDataProperty(:title)
DataPropertyDomain(:title :Book)
DataPropertyRange(:title xsd:string)
AnnotationAssertion(rdfs:label :vatNumber "vatNumber"@en)
FunctionalDataProperty(:vatNumber)
DataPropertyRange(:vatNumber xsd:string)
AnnotationAssertion(rdfs:label :AudioBook "AudioBook"@it)
AnnotationAssertion(rdfs:comment :Author "An author is the creator or originator of any written work such as a book or play, and is also considered a writer or poet. "@en)
AnnotationAssertion(rdfs:label :Author "Author"@it)
EquivalentClasses(:Author ObjectSomeValuesFrom(ObjectInverseOf(:actAsAuthor) owl:Thing))
AnnotationAssertion(rdfs:comment :Book "A book is a medium for recording information in the form of writing or images, typically composed of many pages (made of papyrus, parchment, vellum, or paper) bound together and protected by a cover. The technical term for this physical arrangement is codex (plural, codices). In the history of hand-held physical supports for extended written compositions or records, the codex replaces its predecessor, the scroll. A single sheet in a codex is a leaf and each side of a leaf is a page."@en)
AnnotationAssertion(rdfs:label :Book "Book"@it)
EquivalentClasses(:Book ObjectSomeValuesFrom(:writtenBy owl:Thing))
EquivalentClasses(:Book DataSomeValuesFrom(:genre rdfs:Literal))
EquivalentClasses(:Book DataSomeValuesFrom(:title rdfs:Literal))
SubClassOf(:Book DataMinCardinality(1 :title))
SubClassOf(:Book DataMaxCardinality(3 :genre))
DisjointClasses(:Book :UnpublishedBook)
AnnotationAssertion(rdfs:comment :ClassicBook "A classic is a book accepted as being exemplary or noteworthy."@it)
AnnotationAssertion(rdfs:label :ClassicBook "ClassicBook"@en)
SubClassOf(:ClassicBook :Book)
DisjointClasses(:ClassicBook ObjectSomeValuesFrom(:hasEdition owl:Thing))
AnnotationAssertion(rdfs:label :E-Book "E-Book"@it)
SubClassOf(:E-Book :EconomicEdition)
AnnotationAssertion(rdfs:label :EconomicEdition "EconomicEdition"@it)
DisjointClasses(:EconomicEdition :SpecialEdition)
AnnotationAssertion(rdfs:comment :Edition "The bibliographical definition of an edition includes all copies of a book printed “from substantially the same setting of type,” including all minor typographical variants."@en)
AnnotationAssertion(rdfs:label :Edition "Edition"@it)
EquivalentClasses(:Edition ObjectSomeValuesFrom(:publishedBy owl:Thing))
EquivalentClasses(:Edition DataSomeValuesFrom(:editionNumber rdfs:Literal))
SubClassOf(:Edition ObjectMinCardinality(1 :publishedBy :Publisher))
SubClassOf(:Edition DataSomeValuesFrom(:dateOfPublication rdfs:Literal))
SubClassOf(:Edition DataSomeValuesFrom(:priceInDollars rdfs:Literal))
AnnotationAssertion(rdfs:comment :EmergingWriter "It is an author which is not already well known by a large group of people."@en)
AnnotationAssertion(rdfs:label :EmergingWriter "EmergingWriter"@it)
SubClassOf(:EmergingWriter :Author)
SubClassOf(:EmergingWriter ObjectMaxCardinality(1 ObjectInverseOf(:writtenBy)))
DisjointClasses(:EmergingWriter ObjectAllValuesFrom(ObjectInverseOf(:writtenBy) :ClassicBook))
AnnotationAssertion(rdfs:comment :Person "A person (plural people or persons) is a being that has certain capacities or attributes such as reason, morality, consciousness or self-consciousness, and being a part of a culturally established form of social relations such as kinship, ownership of property, or legal responsibility. "@en)
AnnotationAssertion(rdfs:label :Person "Person"@en)
SubClassOf(:Person DataSomeValuesFrom(:dateOfBirth rdfs:Literal))
SubClassOf(:Person DataSomeValuesFrom(:name rdfs:Literal))
SubClassOf(:Person DataSomeValuesFrom(:vatNumber rdfs:Literal))
AnnotationAssertion(rdfs:label :PrintedBook "PrintedBook"@it)
AnnotationAssertion(rdfs:comment :Publisher "The publisher's activity is of making information, literature, music, software and other content available to the public for sale or for free. "@en)
AnnotationAssertion(rdfs:label :Publisher "Publisher"@en)
EquivalentClasses(:Publisher ObjectSomeValuesFrom(ObjectInverseOf(:actAsPublisher) owl:Thing))
AnnotationAssertion(rdfs:label :ScientificBook "ScientificBook"@en)
SubClassOf(:ScientificBook :Book)
SubClassOf(:ScientificBook ObjectSomeValuesFrom(:hasBookRevision owl:Thing))
SubClassOf(:ScientificBook DataSomeValuesFrom(:scientificTopic rdfs:Literal))
AnnotationAssertion(rdfs:label :ScientificBookRevision "ScientificBook Revision"@en)
EquivalentClasses(:ScientificBookRevision ObjectSomeValuesFrom(ObjectInverseOf(:hasBookRevision) owl:Thing))
EquivalentClasses(:ScientificBookRevision DataSomeValuesFrom(:scientificBookRevisionDate rdfs:Literal))
AnnotationAssertion(rdfs:label :SpecialEdition "SpecialEdition"@it)
AnnotationAssertion(rdfs:label :UnpublishedBook "UnpublishedBook"@en)
SubClassOf(:UnpublishedBook :Book)
DisjointClasses(:UnpublishedBook ObjectSomeValuesFrom(:hasEdition owl:Thing))
SubClassOf(ObjectUnionOf(:AudioBook :E-Book :PrintedBook) :Edition)
SubClassOf(ObjectUnionOf(:EconomicEdition :SpecialEdition) :Edition)
DisjointClasses(:AudioBook :E-Book :PrintedBook)
HasKey(:Book (:writtenBy) (:title))
HasKey(:Edition () (:dateOfPublication :editionNumber))
)