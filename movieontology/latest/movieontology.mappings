<?xml version="1.0" encoding="UTF-8" standalone="no"?><OBDA version="1.0">
    <mappingsMetadata id="imdb mappings 2" version="1.0.0">
        <description>Mappings for IMDB Movie ontology</description>
    </mappingsMetadata>
    
    <prefixes>
        <prefix name="xml:" namespace="http://www.w3.org/XML/1998/namespace"/>
        <prefix name="xsd:" namespace="http://www.w3.org/2001/XMLSchema#"/>
        <prefix name="rdf:" namespace="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
        <prefix name="rdfs:" namespace="http://www.w3.org/2000/01/rdf-schema#"/>
        <prefix name="owl:" namespace="http://www.w3.org/2002/07/owl#"/>
        <prefix name="vann:" namespace="http://purl.org/vocab/vann/"/>
        <prefix name="terms:" namespace="http://purl.org/dc/terms/"/>
        <prefix name="dbo:" namespace="http://dbpedia.org/ontology/"/>
        <prefix name="dbr:" namespace="http://dbpedia.org/resource/"/>
        <prefix name="ns:" namespace="http://creativecommons.org/ns#"/>
        <prefix name="terms1:" namespace="http://open.vocab.org/terms/"/>
        <prefix name="mo:" namespace="http://www.movieontology.org/ontology/"/>
        <prefix name="imdb:" namespace="http://imdb.com/data/"/>
        <prefix name="dc:" namespace="http://purl.org/dc/elements/1.1/"/>
        <prefix name="powder-s:" namespace="http://www.w3.org/2007/05/powder-s#"/>
        <prefix name="page:" namespace="http://dbpedia.org/page/"/>
        <prefix name="foaf:" namespace="http://xmlns.com/foaf/0.1/"/>
        <prefix name="owl2xml:" namespace="http://www.w3.org/2006/12/owl2-xml#"/>
    </prefixes>
    <templates>
        <template>http://imdb.com/data/character/{_}</template>
        <template>http://imdb.com/data/soundmix/{_}</template>
        <template>http://imdb.com/data/person/{_}</template>
        <template>http://www.movieontology.org/ontology/{_}</template>
        <template>http://dbpedia.org/resource/{_}</template>
        <template>http://imdb.com/data/title/{_}</template>
        <template>http://imdb.com/data/company/{_}</template>
        <template>{_}</template>
    </templates>
    <mappings>
        <primitiveView>
            <HEAD string="aka_title_view(title_id, movie_id, aka_title, imdb_index, kind_id, production_year, episode_of_id, season_nr, episode_nr, note)"/>
            <SQLQuery>SELECT t.id AS title_id,
      t.movie_id AS movie_id,
       t.title AS aka_title,
       t.imdb_index AS imdb_index,
       t.kind_id AS kind_id,
       t.production_year AS production_year,
       t.episode_of_id AS episode_of_id,
       t.season_nr AS season_nr,
       t.episode_nr AS episode_nr,
       t.note AS note
FROM aka_title t, kind_type k
WHERE t.kind_id = k.id</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="cast_info_view(movie_id, person_id, character_id, role, note, nr_order, role_id)"/>
            <SQLQuery>SELECT c.movie_id AS movie_id,
       c.person_id AS person_id,
       c.person_role_id AS character_id,
       r.role AS role,
       c.note AS note,
       c.nr_order AS nr_order,
       c.role_id AS role_id
FROM cast_info c, role_type r
WHERE c.role_id = r.id</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="character_view(character_id, name, imdb_index, imdb_id)"/>
            <SQLQuery>SELECT c.id as character_id,
       c.name as name,
       c.imdb_index as imdb_index,
       c.imdb_id as imdb_id
FROM char_name c</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="movie_color_info_view(movie_id, color)"/>
            <SQLQuery>SELECT m.movie_id AS movie_id,
      REPLACE(m.info, ' ', '_') AS color
FROM movie_info m,
     info_type i
WHERE
     m.info_type_id = i.id AND
     i.info = 'color info'</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="movie_info_idx_view(movie_id, info_type_id, info, info_name, info_note)"/>
            <SQLQuery>SELECT m.movie_id AS movie_id,
      m.info_type_id AS info_type_id,
       m.info AS info,
       i.info AS info_name,
       m.note AS info_note
FROM movie_info m, info_type i
WHERE m.info_type_id = i.id</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="movie_info_view(movie_id, info_type_id, info, info_name, info_note)"/>
            <SQLQuery>SELECT m.movie_id AS movie_id,
      m.info_type_id AS info_type_id,
       m.info AS info,
       i.info AS info_name,
       m.note AS info_note
FROM movie_info m, info_type i
WHERE m.info_type_id = i.id</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="movie_languages_view(movie_id, language)"/>
            <SQLQuery>SELECT m.movie_id AS movie_id,
       CONCAT(REPLACE(m.info, ' ', '_'), '_language') AS language
FROM movie_info m, info_type i
WHERE m.info_type_id = i.id AND
      i.info = 'languages'</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="movie_link_view(link_id, movie_id, linked_movie_id, link_type_id, link_name)"/>
            <SQLQuery>SELECT l.id AS link_id,
       l.movie_id AS movie_id,
       l.linked_movie_id AS linked_movie_id,
       l.link_type_id AS link_type_id,
       t.link AS link_name
FROM movie_link l,
     link_type t
WHERE l.link_type_id = t.id</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="movie_soundmix_view(movie_id, soundmix)"/>
            <SQLQuery>SELECT m.movie_id AS movie_id,
      REPLACE(m.info, ' ', '_') AS soundmix
FROM movie_info m,
     info_type i
WHERE
     m.info_type_id = i.id AND
     i.info = 'sound mix'</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="person_info_view(person_id, info_type_id, info, info_name, note)"/>
            <SQLQuery>SELECT p.person_id AS person_id,
       p.info_type_id AS info_type_id,
       p.info AS info,
       i.info AS info_name,
       p.note AS note
FROM person_info p,
     info_type i
WHERE p.info_type_id = i.id</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="person_view(person_id, name, imdb_index, imdb_id, gender)"/>
            <SQLQuery>SELECT n.id AS person_id,
      n.name AS name,
       n.imdb_index AS imdb_index,
       n.imdb_id AS imdb_id,
       n.gender AS gender
FROM name n</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="production_company_view(company_id, movie_id, company_name, country_code, imdb_id)"/>
            <SQLQuery>SELECT c.id AS company_id,
      m.movie_id AS movie_id,
       c.name AS company_name,
       c.country_code AS country_code,
       c.imdb_id AS imdb_id
FROM company_name c,
     movie_companies m
WHERE c.id = m.company_id AND
      m.company_type_id = 2</SQLQuery>
        </primitiveView>
        <primitiveView>
            <HEAD string="title_view(title_id, title, imdb_index, kind_id, kind_name, production_year, imdb_id, episode_of_id, season_nr, episode_nr, series_years)"/>
            <SQLQuery>SELECT t.id AS title_id,
       t.title AS title,
       t.imdb_index AS imdb_index,
       t.kind_id AS kind_id,
       k.kind AS kind_name,
       t.production_year AS production_year,
       t.imdb_id AS imdb_id,
       t.episode_of_id AS episode_of_id,
       t.season_nr AS season_nr,
       t.episode_nr AS episode_nr,
       t.series_years AS series_years
FROM title t, kind_type k
WHERE t.kind_id = k.id</SQLQuery>
        </primitiveView>
        <ontologyPredicateComplexMapping id="M_Character_S_MOD">
            <concept string="http://www.movieontology.org/ontology/Character">
                <template>http://imdb.com/data/character/{character_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>character_view(character_id, name, imdb_index, imdb_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.character_id AS character_id FROM character_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_Character_name_S_MOD">
            <attribute string="http://www.movieontology.org/ontology/name">
                <domainTemplate>http://imdb.com/data/character/{character_id}</domainTemplate>
                <rangeVariable>name</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>character_view(character_id, name, imdb_index, imdb_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.character_id AS character_id, ALIAS_1.name AS name FROM character_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_Production_Company_S_MOD">
            <concept string="http://www.movieontology.org/ontology/Production_Company">
                <template>http://imdb.com/data/company/{company_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>production_company_view(company_id, movie_id, company_name, country_code, imdb_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.company_id AS company_id FROM production_company_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_akaTitle_S_MOD">
            <attribute string="http://www.movieontology.org/ontology/akaTitle">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeVariable>aka_title</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>aka_title_view(title_id, movie_id, aka_title, imdb_index, kind_id, production_year, episode_of_id, season_nr, episode_nr, note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.movie_id AS movie_id, ALIAS_1.aka_title AS aka_title FROM aka_title_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_akaTitleInfo_S_MOD">
            <attribute string="http://www.movieontology.org/ontology/akaTitleInfo">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeVariable>note</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>aka_title_view(title_id, movie_id, aka_title, imdb_index, kind_id, production_year, episode_of_id, season_nr, episode_nr, note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.movie_id AS movie_id, ALIAS_1.note AS note FROM aka_title_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_companyName_S_MOD">
            <attribute string="http://www.movieontology.org/ontology/companyName">
                <domainTemplate>http://imdb.com/data/company/{company_id}</domainTemplate>
                <rangeVariable>company_name</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>production_company_view(company_id, movie_id, company_name, country_code, imdb_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.company_id AS company_id, ALIAS_1.company_name AS company_name FROM production_company_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasCharacter_S_MOD">
            <role string="http://www.movieontology.org/ontology/hasCharacter">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/character/{character_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>cast_info_view(movie_id, person_id, character_id, role, note, nr_order, role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.movie_id AS movie_id, ALIAS_1.character_id AS character_id FROM cast_info_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasColor_S_MOD">
            <role string="http://www.movieontology.org/ontology/hasColor">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://www.movieontology.org/ontology/{color}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>movie_color_info_view(movie_id, color)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.movie_id AS movie_id, ALIAS_1.color AS color FROM movie_color_info_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasSoundmix_S_MOD">
            <role string="http://www.movieontology.org/ontology/hasSoundmix">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/soundmix/{soundmix}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>movie_soundmix_view(movie_id, soundmix)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.movie_id AS movie_id, ALIAS_1.soundmix AS soundmix FROM movie_soundmix_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_imdbid_S_MOD">
            <attribute string="http://www.movieontology.org/ontology/imdbid">
                <domainTemplate>http://imdb.com/data/title/{title_id}</domainTemplate>
                <rangeVariable>imdb_id</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>title_view(title_id, title, imdb_index, kind_id, kind_name, production_year, imdb_id, episode_of_id, season_nr, episode_nr, series_years)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.title_id AS title_id, ALIAS_1.imdb_id AS imdb_id FROM title_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_isProducedBy_S_MOD">
            <role string="http://www.movieontology.org/ontology/isProducedBy">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/company/{company_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>production_company_view(company_id, movie_id, company_name, country_code, imdb_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.movie_id AS movie_id, ALIAS_1.company_id AS company_id FROM production_company_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_isTranslatedTo_S_MOD">
            <role string="http://www.movieontology.org/ontology/isTranslatedTo">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://dbpedia.org/resource/{language}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>movie_languages_view(movie_id, language)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.movie_id AS movie_id, ALIAS_1.language AS language FROM movie_languages_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_name_S_MOD">
            <attribute string="http://www.movieontology.org/ontology/name">
                <domainTemplate>http://imdb.com/data/person/{person_id}</domainTemplate>
                <rangeVariable>name</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>person_view(person_id, name, imdb_index, imdb_id, gender)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.person_id AS person_id, ALIAS_1.name AS name FROM person_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_person_S_MOD">
            <concept string="http://dbpedia.org/ontology/Person">
                <template>http://imdb.com/data/person/{person_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>person_view(person_id, name, imdb_index, imdb_id, gender)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.person_id AS person_id FROM person_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_playsRoleOf_S_MOD">
            <role string="http://www.movieontology.org/ontology/playsRoleOf">
                <domainTemplate>http://imdb.com/data/person/{person_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/character/{character_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>cast_info_view(movie_id, person_id, character_id, role, note, nr_order, role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.person_id AS person_id, ALIAS_1.character_id AS character_id FROM cast_info_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_productionYear_S_MOD">
            <attribute string="http://www.movieontology.org/ontology/productionYear">
                <domainTemplate>http://imdb.com/data/title/{title_id}</domainTemplate>
                <rangeVariable>production_year</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>title_view(title_id, title, imdb_index, kind_id, kind_name, production_year, imdb_id, episode_of_id, season_nr, episode_nr, series_years)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.title_id AS title_id, ALIAS_1.production_year AS production_year FROM title_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_title_S_MOD">
            <attribute string="http://www.movieontology.org/ontology/title">
                <domainTemplate>http://imdb.com/data/title/{title_id}</domainTemplate>
                <rangeVariable>title</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>title_view(title_id, title, imdb_index, kind_id, kind_name, production_year, imdb_id, episode_of_id, season_nr, episode_nr, series_years)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_1.title_id AS title_id, ALIAS_1.title AS title FROM title_view AS ALIAS_1</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_Episode_C_MOD">
            <concept string="http://www.movieontology.org/ontology/Episode">
                <template>http://imdb.com/data/title/{title_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(kind_name,'episode'^^xs:string)</viewAtom>
                <viewAtom>IS_NOT_NULL(episode_of_id)</viewAtom>
                <viewAtom>title_view(title_id,title,imdb_index,kind_id,kind_name,production_year,imdb_id,episode_of_id,season_nr,episode_nr,series_years)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_3.title_id AS title_id FROM title_view AS ALIAS_3 WHERE ALIAS_3.kind_name = 'episode' AND ALIAS_3.episode_of_id IS NOT NULL</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_Movie_C_MOD">
            <concept string="http://www.movieontology.org/ontology/Movie">
                <template>http://imdb.com/data/title/{title_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(kind_name,'movie'^^xs:string)</viewAtom>
                <viewAtom>IS_NULL(episode_of_id)</viewAtom>
                <viewAtom>title_view(title_id,title,imdb_index,kind_id,kind_name,production_year,imdb_id,episode_of_id,season_nr,episode_nr,series_years)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_3.title_id AS title_id FROM title_view AS ALIAS_3 WHERE ALIAS_3.kind_name = 'movie' AND ALIAS_3.episode_of_id IS NULL</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_TVSeries_C_MOD">
            <concept string="http://www.movieontology.org/ontology/TVSeries">
                <template>http://imdb.com/data/title/{title_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(kind_name,'tv series'^^xs:string)</viewAtom>
                <viewAtom>title_view(title_id,title,imdb_index,kind_id,kind_name,production_year,imdb_id,episode_of_id,season_nr,episode_nr,series_years)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.title_id AS title_id FROM title_view AS ALIAS_2 WHERE ALIAS_2.kind_name = 'tv series'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_VideoGame_C_MOD">
            <concept string="http://www.movieontology.org/ontology/VideoGame">
                <template>http://imdb.com/data/title/{title_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(kind_name,'video game'^^xs:string)</viewAtom>
                <viewAtom>title_view(title_id,title,imdb_index,kind_id,kind_name,production_year,imdb_id,episode_of_id,season_nr,episode_nr,series_years)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.title_id AS title_id FROM title_view AS ALIAS_2 WHERE ALIAS_2.kind_name = 'video game'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_actor_C_MOD">
            <concept string="http://dbpedia.org/ontology/Actor">
                <template>http://imdb.com/data/person/{person_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>IN(role,'actor'^^xs:string,'actress'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role IN ('actor', 'actress')</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_belongsToGenre_C_MOD">
            <role string="http://www.movieontology.org/ontology/belongsToGenre">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://www.movieontology.org/ontology/{info}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(info_name,'genres'^^xs:string)</viewAtom>
                <viewAtom>movie_info_view(movie_id,info_type_id,info,info_name,info_note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.info AS info FROM movie_info_view AS ALIAS_2 WHERE ALIAS_2.info_name = 'genres'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_birthDate_C_MOD">
            <attribute string="http://www.movieontology.org/ontology/birthDate">
                <domainTemplate>http://imdb.com/data/person/{person_id}</domainTemplate>
                <rangeVariable>info</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(info_name,'birth date'^^xs:string)</viewAtom>
                <viewAtom>person_info_view(person_id,info_type_id,info,info_name,note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.person_id AS person_id, ALIAS_2.info AS info FROM person_info_view AS ALIAS_2 WHERE ALIAS_2.info_name = 'birth date'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_birthName_C_MOD">
            <attribute string="http://www.movieontology.org/ontology/birthName">
                <domainTemplate>http://imdb.com/data/person/{person_id}</domainTemplate>
                <rangeVariable>info</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(info_name,'birth name'^^xs:string)</viewAtom>
                <viewAtom>person_info_view(person_id,info_type_id,info,info_name,note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.person_id AS person_id, ALIAS_2.info AS info FROM person_info_view AS ALIAS_2 WHERE ALIAS_2.info_name = 'birth name'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_budget_C_MOD">
            <attribute string="http://www.movieontology.org/ontology/budget">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeVariable>info</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(info_name,'budget'^^xs:string)</viewAtom>
                <viewAtom>movie_info_view(movie_id,info_type_id,info,info_name,info_note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.info AS info FROM movie_info_view AS ALIAS_2 WHERE ALIAS_2.info_name = 'budget'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_costume_designer_C_MOD">
            <concept string="http://www.movieontology.org/ontology/Costume_Designer">
                <template>http://imdb.com/data/person/{person_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'costume designer'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'costume designer'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_editor_C_MOD">
            <concept string="http://www.movieontology.org/ontology/Editor">
                <template>http://imdb.com/data/person/{person_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'editor'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'editor'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_episodeNr_C_MOD">
            <attribute string="http://www.movieontology.org/ontology/episodeNr">
                <domainTemplate>http://imdb.com/data/title/{title_id}</domainTemplate>
                <rangeVariable>episode_nr</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>IS_NOT_NULL(episode_nr)</viewAtom>
                <viewAtom>title_view(title_id,title,imdb_index,kind_id,kind_name,production_year,imdb_id,episode_of_id,season_nr,episode_nr,series_years)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.title_id AS title_id, ALIAS_2.episode_nr AS episode_nr FROM title_view AS ALIAS_2 WHERE ALIAS_2.episode_nr IS NOT NULL</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_followedBy_C_MOD">
            <role string="http://www.movieontology.org/ontology/followedBy">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/title/{linked_movie_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(link_name,'followed by'^^xs:string)</viewAtom>
                <viewAtom>movie_link_view(link_id,movie_id,linked_movie_id,link_type_id,link_name)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.linked_movie_id AS linked_movie_id FROM movie_link_view AS ALIAS_2 WHERE ALIAS_2.link_name = 'followed by'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_follows_C_MOD">
            <role string="http://www.movieontology.org/ontology/follows">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/title/{linked_movie_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(link_name,'follows'^^xs:string)</viewAtom>
                <viewAtom>movie_link_view(link_id,movie_id,linked_movie_id,link_type_id,link_name)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.linked_movie_id AS linked_movie_id FROM movie_link_view AS ALIAS_2 WHERE ALIAS_2.link_name = 'follows'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_gross_C_MOD">
            <attribute string="http://www.movieontology.org/ontology/gross">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeVariable>info</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(info_name,'gross'^^xs:string)</viewAtom>
                <viewAtom>movie_info_view(movie_id,info_type_id,info,info_name,info_note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.info AS info FROM movie_info_view AS ALIAS_2 WHERE ALIAS_2.info_name = 'gross'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasActress_C_MOD">
            <role string="http://www.movieontology.org/ontology/hasActress">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/person/{person_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'actress'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'actress'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasComposer_C_MOD">
            <role string="http://www.movieontology.org/ontology/hasComposer">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/person/{person_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'composer'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'composer'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasCostumeDesigner_C_MOD">
            <role string="http://www.movieontology.org/ontology/hasCostumeDesigner">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/person/{person_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'costume designer'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'costume designer'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasDirector_C_MOD">
            <role string="http://www.movieontology.org/ontology/hasDirector">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/person/{person_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'director'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'director'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasEditor_C_MOD">
            <role string="http://www.movieontology.org/ontology/hasEditor">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/person/{person_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'editor'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'editor'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasMaleActor_C_MOD">
            <role string="http://www.movieontology.org/ontology/hasMaleActor">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/person/{person_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'actor'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'actor'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasProducer_C_MOD">
            <role string="http://www.movieontology.org/ontology/hasProducer">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/person/{person_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'producer'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'producer'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasReleasingCountry_C_MOD">
            <role string="http://www.movieontology.org/ontology/hasReleasingCountry">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://www.movieontology.org/ontology/{info}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(info_name,'countries'^^xs:string)</viewAtom>
                <viewAtom>movie_info_view(movie_id,info_type_id,info,info_name,info_note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.info AS info FROM movie_info_view AS ALIAS_2 WHERE ALIAS_2.info_name = 'countries'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_hasRemake_C_MOD">
            <role string="http://www.movieontology.org/ontology/hasRemake">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/title/{linked_movie_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(link_name,'remade as'^^xs:string)</viewAtom>
                <viewAtom>movie_link_view(link_id,movie_id,linked_movie_id,link_type_id,link_name)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.linked_movie_id AS linked_movie_id FROM movie_link_view AS ALIAS_2 WHERE ALIAS_2.link_name = 'remade as'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_imdbrating_C_MOD">
            <attribute string="http://www.movieontology.org/ontology/rating">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeVariable>info</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(info_name,'rating'^^xs:string)</viewAtom>
                <viewAtom>movie_info_idx_view(movie_id,info_type_id,info,info_name,info_note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.info AS info FROM movie_info_idx_view AS ALIAS_2 WHERE ALIAS_2.info_name = 'rating'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_isEpisodeOf_C_MOD">
            <role string="http://www.movieontology.org/ontology/isEpisodeOf">
                <domainTemplate>http://imdb.com/data/title/{title_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/title/{episode_of_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(kind_name,'episode'^^xs:string)</viewAtom>
                <viewAtom>IS_NOT_NULL(episode_of_id)</viewAtom>
                <viewAtom>title_view(title_id,title,imdb_index,kind_id,kind_name,production_year,imdb_id,episode_of_id,season_nr,episode_nr,series_years)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_3.title_id AS title_id, ALIAS_3.episode_of_id AS episode_of_id FROM title_view AS ALIAS_3 WHERE ALIAS_3.kind_name = 'episode' AND ALIAS_3.episode_of_id IS NOT NULL</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_isReferencedBy_C_MOD">
            <role string="http://www.movieontology.org/ontology/referencedBy">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/title/{linked_movie_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(link_name,'referenced in'^^xs:string)</viewAtom>
                <viewAtom>movie_link_view(link_id,movie_id,linked_movie_id,link_type_id,link_name)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.linked_movie_id AS linked_movie_id FROM movie_link_view AS ALIAS_2 WHERE ALIAS_2.link_name = 'referenced in'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_isRemakeOf_C_MOD">
            <role string="http://www.movieontology.org/ontology/isRemakeOf">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/title/{linked_movie_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(link_name,'remake of'^^xs:string)</viewAtom>
                <viewAtom>movie_link_view(link_id,movie_id,linked_movie_id,link_type_id,link_name)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.linked_movie_id AS linked_movie_id FROM movie_link_view AS ALIAS_2 WHERE ALIAS_2.link_name = 'remake of'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_musical_artist_C_MOD">
            <concept string="http://dbpedia.org/ontology/Musical_Artist">
                <template>http://imdb.com/data/person/{person_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'composer'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'composer'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_producer_C_MOD">
            <concept string="http://www.movieontology.org/ontology/Producer">
                <template>http://imdb.com/data/person/{person_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'producer'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'producer'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_references_C_MOD">
            <role string="http://www.movieontology.org/ontology/references">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeTemplate>http://imdb.com/data/title/{linked_movie_id}</rangeTemplate>
            </role>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(link_name,'references'^^xs:string)</viewAtom>
                <viewAtom>movie_link_view(link_id,movie_id,linked_movie_id,link_type_id,link_name)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.linked_movie_id AS linked_movie_id FROM movie_link_view AS ALIAS_2 WHERE ALIAS_2.link_name = 'references'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_releasedate_C_MOD">
            <attribute string="http://www.movieontology.org/ontology/releasedate">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeVariable>info</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(info_name,'release dates'^^xs:string)</viewAtom>
                <viewAtom>movie_info_view(movie_id,info_type_id,info,info_name,info_note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.info AS info FROM movie_info_view AS ALIAS_2 WHERE ALIAS_2.info_name = 'release dates'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_runtime_C_MOD">
            <attribute string="http://www.movieontology.org/ontology/runtime">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeVariable>info</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(info_name,'runtimes'^^xs:string)</viewAtom>
                <viewAtom>movie_info_view(movie_id,info_type_id,info,info_name,info_note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.info AS info FROM movie_info_view AS ALIAS_2 WHERE ALIAS_2.info_name = 'runtimes'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_seasonNr_C_MOD">
            <attribute string="http://www.movieontology.org/ontology/seasonNr">
                <domainTemplate>http://imdb.com/data/title/{title_id}</domainTemplate>
                <rangeVariable>season_nr</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>IS_NOT_NULL(season_nr)</viewAtom>
                <viewAtom>title_view(title_id,title,imdb_index,kind_id,kind_name,production_year,imdb_id,episode_of_id,season_nr,episode_nr,series_years)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.title_id AS title_id, ALIAS_2.season_nr AS season_nr FROM title_view AS ALIAS_2 WHERE ALIAS_2.season_nr IS NOT NULL</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_votes_C_MOD">
            <attribute string="http://www.movieontology.org/ontology/votesCount">
                <domainTemplate>http://imdb.com/data/title/{movie_id}</domainTemplate>
                <rangeVariable>info</rangeVariable>
            </attribute>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(info_name,'votes'^^xs:string)</viewAtom>
                <viewAtom>movie_info_idx_view(movie_id,info_type_id,info,info_name,info_note)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.movie_id AS movie_id, ALIAS_2.info AS info FROM movie_info_idx_view AS ALIAS_2 WHERE ALIAS_2.info_name = 'votes'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
        <ontologyPredicateComplexMapping id="M_writer_C_MOD">
            <concept string="http://dbpedia.org/ontology/Writer">
                <template>http://imdb.com/data/person/{person_id}</template>
            </concept>
            <viewAtomsConjunction>
                <viewAtom>EQUALS(role,'writer'^^xs:string)</viewAtom>
                <viewAtom>cast_info_view(movie_id,person_id,character_id,role,note,nr_order,role_id)</viewAtom>
            </viewAtomsConjunction>
            <userQuery>SELECT ALIAS_2.person_id AS person_id FROM cast_info_view AS ALIAS_2 WHERE ALIAS_2.role = 'writer'</userQuery>
            <description>Modified by IssueMastro354.class</description>
        </ontologyPredicateComplexMapping>
    </mappings>
    <blocks/>
    <constraints>
        <inclusion>
            <left arg="aka_title_view[2]"/>
            <right arg="title_view[1]"/>
        </inclusion>
        <inclusion>
            <left arg="cast_info_view[1]"/>
            <right arg="title_view[1]"/>
        </inclusion>
        <inclusion>
            <left arg="cast_info_view[2]"/>
            <right arg="person_view[1]"/>
        </inclusion>
        <inclusion>
            <left arg="cast_info_view[3]"/>
            <right arg="character_view[1]"/>
        </inclusion>
        <inclusion>
            <left arg="movie_color_info_view[1]"/>
            <right arg="title_view[1]"/>
        </inclusion>
        <inclusion>
            <left arg="movie_info_idx_view[1]"/>
            <right arg="title_view[1]"/>
        </inclusion>
        <inclusion>
            <left arg="movie_info_view[1]"/>
            <right arg="title_view[1]"/>
        </inclusion>
        <inclusion>
            <left arg="movie_languages_view[1]"/>
            <right arg="title_view[1]"/>
        </inclusion>
        <inclusion>
            <left arg="movie_link_view[2]"/>
            <right arg="title_view[1]"/>
        </inclusion>
        <inclusion>
            <left arg="movie_link_view[3]"/>
            <right arg="title_view[1]"/>
        </inclusion>
        <inclusion>
            <left arg="movie_soundmix_view[1]"/>
            <right arg="title_view[1]"/>
        </inclusion>
        <inclusion>
            <left arg="person_info_view[1]"/>
            <right arg="person_view[1]"/>
        </inclusion>
        <key>
            <projection arg="aka_title_view[1]"/>
        </key>
        <key>
            <projection arg="character_view[1]"/>
        </key>
        <key>
            <projection arg="movie_link_view[1]"/>
        </key>
        <key>
            <projection arg="person_view[1]"/>
        </key>
        <key>
            <projection arg="production_company_view[1]"/>
        </key>
        <key>
            <projection arg="title_view[1]"/>
        </key>
    </constraints>
</OBDA>